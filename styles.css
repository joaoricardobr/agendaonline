        };
        request.onerror = (event) => {
            console.error('Erro ao abrir IndexedDB:', event.target.error);
            errorLogs.push(`[${new Date().toISOString()}] Erro ao abrir IndexedDB: ${event.target.error}`);
            reject(event.target.error);
        };
    });
}

async function loadFromIndexedDB() {
    return new Promise((resolve, reject) => {
        const request = indexedDB.open('ClinicDB', 1);
        request.onupgradeneeded = (event) => {
            const db = event.target.result;
            if (!db.objectStoreNames.contains('appointments')) db.createObjectStore('appointments', { keyPath: 'id' });
            if (!db.objectStoreNames.contains('medicos')) db.createObjectStore('medicos', { keyPath: 'nome' });
            if (!db.objectStoreNames.contains('users')) db.createObjectStore('users', { keyPath: 'username' });
            if (!db.objectStoreNames.contains('settings')) db.createObjectStore('settings', { keyPath: 'key' });
        };
        request.onsuccess = (event) => {
            const db = event.target.result;
            const transaction = db.transaction(['appointments', 'medicos', 'users', 'settings'], 'readonly');
            const appointmentsStore = transaction.objectStore('appointments');
            const medicosStore = transaction.objectStore('medicos');
            const usersStore = transaction.objectStore('users');
            const settingsStore = transaction.objectStore('settings');

            const data = { appointments: [], medicos: [], users: [], settings: {} };

            appointmentsStore.getAll().onsuccess = (e) => data.appointments = e.target.result || [];
            medicosStore.getAll().onsuccess = (e) => data.medicos = e.target.result || [];
            usersStore.getAll().onsuccess = (e) => data.users = e.target.result || [];
            settingsStore.getAll().onsuccess = (e) => {
                const settings = e.target.result || [];
                settings.forEach(s => data.settings[s.key] = s.value);
            };

            transaction.oncomplete = () => {
                db.close();
                resolve(data);
            };
            transaction.onerror = () => reject(transaction.error);
        };
        request.onerror = (event) => reject(event.target.error);
    });
}

// Impressão
function printAppointments() {
    // Obtém as colunas visíveis baseadas nos checkboxes
    const columnToggles = document.querySelectorAll('.column-toggle');
    const visibleColumns = Array.from(columnToggles)
        .filter(t => t.checked)
        .map(t => t.dataset.column);

    // Cria uma tabela temporária apenas com as colunas visíveis
    const tempTable = document.createElement('table');
    const thead = document.createElement('thead');
    const tbody = document.createElement('tbody');
    
    // Cria o cabeçalho com apenas as colunas visíveis
    const headerRow = document.createElement('tr');
    visibleColumns.forEach(col => {
        const th = document.createElement('th');
        th.textContent = document.querySelector(`.column-toggle[data-column="${col}"]`)
            .parentElement.textContent.trim();
        headerRow.appendChild(th);
    });
    thead.appendChild(headerRow);

    // Adiciona as linhas com apenas as colunas visíveis
    appointments.forEach(app => {
        const row = document.createElement('tr');
        visibleColumns.forEach(col => {
            const td = document.createElement('td');
            td.textContent = app[col] || '-';
            row.appendChild(td);
        });
        tbody.appendChild(row);
    });

    tempTable.appendChild(thead);
    tempTable.appendChild(tbody);
    
    // Cria um container temporário para impressão
    const printContainer = document.createElement('div');
    printContainer.className = 'print-container';
    printContainer.appendChild(tempTable);
    
    // Adiciona ao documento temporariamente
    document.body.appendChild(printContainer);
    
    // Aplica estilos específicos para impressão
    const style = document.createElement('style');
    style.textContent = `
        @media print {
            body * { visibility: hidden; }
            .print-container, .print-container * { visibility: visible; }
            .print-container { position: absolute; left: 0; top: 0; width: 100%; }
            table { width: 100%; border-collapse: collapse; font-size: 10pt; }
            th, td { padding: 5px; border: 1px solid #1e40af; }
        }
    `;
    document.head.appendChild(style);

    window.print();

    // Remove os elementos temporários após a impressão
    document.body.removeChild(printContainer);
    document.head.removeChild(style);
}

// Exportação para Excel
function exportToExcel() {
    const ws = XLSX.utils.json_to_sheet(appointments.map(app => ({
        ID: app.id,
        Paciente: app.nomePaciente,
        Telefone: app.telefone,
        Email: app.email,
        Médico: app.nomeMedico,
        'Local CRM': app.localCRM,
        Data: app.dataConsulta,
        Hora: app.horaConsulta,
        'Tipo Cirurgia': app.tipoCirurgia,
        Procedimentos: app.procedimentos,
        'Feito Por': app.agendamentoFeitoPor,
        Descrição: app.descricao,
        Status: app.status
    })));
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Agendamentos');
    XLSX.writeFile(wb, `agendamentos_${new Date().toISOString().split('T')[0]}.xlsx`);
    showNotification('Exportado para Excel com sucesso!');
}

// Relatórios
function generateReport() {
    const reportType = document.getElementById('reportType').value;
    const reportMonth = document.getElementById('reportMonth').value;
    const reportYear = document.getElementById('reportYear').value;
    const reportDoctor = document.getElementById('reportDoctor').value;

    let filteredAppointments = [...appointments];

    if (reportType === 'byName') filteredAppointments.sort((a, b) => a.nomePaciente.localeCompare(b.nomePaciente));
    else if (reportType === 'byRecent') filteredAppointments.sort((a, b) => new Date(b.dataConsulta) - new Date(a.dataConsulta));
    else if (reportType === 'byOldest') filteredAppointments.sort((a, b) => new Date(a.dataConsulta) - new Date(b.dataConsulta));
    else if (reportType === 'byPhone') filteredAppointments.sort((a, b) => a.telefone.localeCompare(b.telefone));
    else if (reportType === 'byDate') filteredAppointments.sort((a, b) => new Date(a.dataConsulta) - new Date(b.dataConsulta));
    else if (reportType === 'byDoctor') filteredAppointments.sort((a, b) => a.nomeMedico.localeCompare(b.nomeMedico));
    else if (reportType === 'byMonth' && reportMonth) {
        const [year, month] = reportMonth.split('-');
        filteredAppointments = filteredAppointments.filter(app => {
            const [appYear, appMonth] = app.dataConsulta.split('-');
            return appYear === year && appMonth === month;
        });
    } else if (reportType === 'byYear' && reportYear) {
        filteredAppointments = filteredAppointments.filter(app => app.dataConsulta.startsWith(reportYear));
    }

    if (reportDoctor) filteredAppointments = filteredAppointments.filter(app => app.nomeMedico === reportDoctor);

    const reportBody = document.getElementById('reportBody');
    const reportGrid = document.getElementById('reportGrid');
    reportBody.innerHTML = '';
    reportGrid.innerHTML = '';

    filteredAppointments.forEach(app => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${app.nomePaciente || '-'}</td>
            <td>${app.telefone || '-'}</td>
            <td>${app.email || '-'}</td>
            <td>${app.nomeMedico || '-'}</td>
            <td>${app.localCRM || '-'}</td>
            <td>${app.dataConsulta || '-'}</td>
            <td>${app.horaConsulta || '-'}</td>
            <td>${app.tipoCirurgia || '-'}</td>
            <td>${app.procedimentos || '-'}</td>
            <td>${app.agendamentoFeitoPor || '-'}</td>
            <td>${app.descricao || '-'}</td>
            <td>${app.status || '-'}</td>
        `;
        reportBody.appendChild(row);

        const card = document.createElement('div');
        card.className = 'card';
        card.innerHTML = `
            <h4>${app.nomePaciente || 'Sem Nome'}</h4>
            <p>Telefone: ${app.telefone || '-'}</p>
            <p>Email: ${app.email || '-'}</p>
            <p>Médico: ${app.nomeMedico || '-'}</p>
            <p>Local CRM: ${app.localCRM || '-'}</p>
            <p>Data: ${app.dataConsulta || '-'}</p>
            <p>Hora: ${app.horaConsulta || '-'}</p>
            <p>Tipo Cirurgia: ${app.tipoCirurgia || '-'}</p>
            <p>Procedimentos: ${app.procedimentos || '-'}</p>
            <p>Feito Por: ${app.agendamentoFeitoPor || '-'}</p>
            <p>Descrição: ${app.descricao || '-'}</p>
            <p>Status: ${app.status || '-'}</p>
        `;
        reportGrid.appendChild(card);
    });

    showNotification('Relatório gerado com sucesso!');
}

function toggleReportView(view) {
    document.querySelectorAll('#reportsTab .view-mode').forEach(btn => btn.classList.remove('active'));
    document.querySelector(`#reportsTab .view-mode[data-view="${view}"]`).classList.add('active');
    document.getElementById('reportResult').style.display = view === 'list' ? 'block' : 'none';
    document.getElementById('reportGrid').style.display = view === 'grid' ? 'grid' : 'none';
}

// Insights
function generateInsights() {
    const insightsCards = document.getElementById('insightsCards');
    insightsCards.innerHTML = '';

    const totalAppointments = appointments.length;
    const byStatus = appointments.reduce((acc, app) => {
        acc[app.status] = (acc[app.status] || 0) + 1;
        return acc;
    }, {});
    const byDoctor = appointments.reduce((acc, app) => {
        acc[app.nomeMedico] = (acc[app.nomeMedico] || 0) + 1;
        return acc;
    }, {});
    const mostCommonProcedures = appointments.reduce((acc, app) => {
        app.procedimentos.split(',').forEach(proc => {
            if (proc.trim()) acc[proc.trim()] = (acc[proc.trim()] || 0) + 1;
        });
        return acc;
    }, {});

    insightsCards.innerHTML += `
        <div class="insights-card">
            <h4><i class="fas fa-calendar-check"></i> Total de Agendamentos</h4>
            <p>${totalAppointments} agendamentos registrados.</p>
        </div>
        <div class="insights-card">
            <h4><i class="fas fa-chart-pie"></i> Agendamentos por Status</h4>
            <ul>${Object.entries(byStatus).map(([status, count]) => `<li>${status}: ${count}</li>`).join('')}</ul>
        </div>
        <div class="insights-card">
            <h4><i class="fas fa-user-md"></i> Agendamentos por Médico</h4>
            <ul>${Object.entries(byDoctor).map(([doctor, count]) => `<li>${doctor || 'Sem Médico'}: ${count}</li>`).join('')}</ul>
        </div>
        <div class="insights-card">
            <h4><i class="fas fa-procedures"></i> Procedimentos Mais Comuns</h4>
            <ul>${Object.entries(mostCommonProcedures).sort((a, b) => b[1] - a[1]).slice(0, 5).map(([proc, count]) => `<li>${proc}: ${count}</li>`).join('')}</ul>
        </div>
        <div class="insights-card error-log-card">
            <h4><i class="fas fa-exclamation-triangle"></i> Logs de Erros</h4>
            <ul>${errorLogs.length > 0 ? errorLogs.map(log => `<li>${log}</li>`).join('') : '<li>Nenhum erro registrado</li>'}</ul>
        </div>
    `;
}

// Exclusão em Massa
function openDeleteAllModal() {
    deleteAllModal.style.display = 'block';
}

function closeDeleteAllModal() {
    closeModal(deleteAllModal);
}

async function confirmDeleteAll() {
    const password = document.getElementById('deletePassword').value;
    if (password === deleteAllPassword) {
        try {
            appointments = [];
            await Promise.all(appointments.map(app => deleteFromFirebase('appointments', app.id)));
            await saveToIndexedDB('appointments', appointments);
            renderAppointments();
            closeDeleteAllModal();
            showNotification('Todos os agendamentos foram excluídos!');
        } catch (error) {
            console.error('Erro ao excluir todos:', error);
            errorLogs.push(`[${new Date().toISOString()}] Erro ao excluir todos: ${error.message}`);
            showNotification('Erro ao excluir: ' + error.message, true);
        }
    } else {
        showNotification('Senha incorreta!', true);
    }
}

// Filtros Avançados
function openSortFilterModal() {
    sortFilterModal.style.display = 'block';
}

function closeSortFilterModal() {
    closeModal(sortFilterModal);
}

function applySortFilter() {
    const sortType = document.getElementById('sortType').value;
    let sortedAppointments = [...appointments];

    if (sortType === 'nameAZ') sortedAppointments.sort((a, b) => a.nomePaciente.localeCompare(b.nomePaciente));
    else if (sortType === 'recent') sortedAppointments.sort((a, b) => new Date(b.dataConsulta) - new Date(a.dataConsulta));
    else if (sortType === 'oldest') sortedAppointments.sort((a, b) => new Date(a.dataConsulta) - new Date(b.dataConsulta));
    else if (sortType === 'phone') sortedAppointments.sort((a, b) => a.telefone.localeCompare(b.telefone));
    else if (sortType === 'date') sortedAppointments.sort((a, b) => new Date(a.dataConsulta) - new Date(b.dataConsulta));
    else if (sortType === 'doctor') sortedAppointments.sort((a, b) => a.nomeMedico.localeCompare(b.nomeMedico));
    else if (sortType === 'month') sortedAppointments.sort((a, b) => a.dataConsulta.slice(0, 7).localeCompare(b.dataConsulta.slice(0, 7)));
    else if (sortType === 'year') sortedAppointments.sort((a, b) => a.dataConsulta.slice(0, 4).localeCompare(b.dataConsulta.slice(0, 4)));

    appointments = sortedAppointments;
    renderAppointments();
    closeSortFilterModal();
    showNotification('Filtro aplicado com sucesso!');
}

// Configurações e Tema
function openSettingsModal() {
    settingsModal.style.display = 'block';
    document.getElementById('bodyBgColor').value = theme.bodyBgColor || '#f0f4f8';
    document.getElementById('cardBgColor').value = theme.cardBgColor || '#ffffff';
    document.getElementById('formBgColor').value = theme.formBgColor || '#ffffff';
    document.getElementById('textColor').value = theme.textColor || '#1f2937';
    document.getElementById('borderColor').value = theme.borderColor || '#1e40af';
    document.getElementById('deleteAllPassword').value = '';
}

async function saveTheme() {
    theme = {
        bodyBgColor: document.getElementById('bodyBgColor').value,
        cardBgColor: document.getElementById('cardBgColor').value,
        formBgColor: document.getElementById('formBgColor').value,
        textColor: document.getElementById('textColor').value,
        borderColor: document.getElementById('borderColor').value
    };
    const newPassword = document.getElementById('deleteAllPassword').value;
    if (newPassword) deleteAllPassword = newPassword;

    await saveToFirebase('settings', { key: 'theme', value: theme });
    await saveToFirebase('settings', { key: 'deleteAllPassword', value: deleteAllPassword });
    await saveToIndexedDB('settings', { currentView, deleteAllPassword, lastSync, theme });
    applyTheme();
    showNotification('Tema salvo com sucesso!');
}

function applyTheme() {
    document.body.style.backgroundColor = theme.bodyBgColor || '#f0f4f8';
    document.querySelectorAll('.card, .form-section, .appointments-section, .search-card, .modal-content').forEach(el => {
        el.style.backgroundColor = theme.cardBgColor || '#ffffff';
    });
    document.querySelector('.form-section').style.backgroundColor = theme.formBgColor || '#ffffff';
    document.body.style.color = theme.textColor || '#1f2937';
    document.querySelectorAll('input, select, textarea, .search-card, .form-section, .appointments-section, .modal-content, table').forEach(el => {
        el.style.borderColor = theme.borderColor || '#1e40af';
    });
    document.querySelectorAll('.control-btn, button:not(.action-btn)').forEach(btn => {
        btn.style.borderColor = theme.borderColor || '#1e40af';
    });
}

async function resetTheme() {
    theme = {};
    deleteAllPassword = '1234';
    await saveToFirebase('settings', { key: 'theme', value: theme });
    await saveToFirebase('settings', { key: 'deleteAllPassword', value: deleteAllPassword });
    await saveToIndexedDB('settings', { currentView, deleteAllPassword, lastSync, theme });
    applyTheme();
    showNotification('Tema restaurado para o padrão!');
}

// Detalhes nos Mini-Cards
function toggleDetails(card) {
    const details = card.querySelector('.card-details');
    details.style.display = details.style.display === 'none' ? 'block' : 'none';
}
